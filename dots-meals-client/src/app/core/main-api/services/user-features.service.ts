/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http'
import { Injectable } from '@angular/core'
import { Observable } from 'rxjs'
import { map } from 'rxjs/operators'

import { BaseService } from '../base-service'
import { ApiConfiguration } from '../api-configuration'
import { StrictHttpResponse } from '../strict-http-response'

import { userRetrieveLoggedUserEndpoint } from '../fn/user-features/user-retrieve-logged-user-endpoint'
import { UserRetrieveLoggedUserEndpoint$Params } from '../fn/user-features/user-retrieve-logged-user-endpoint'
import { UserRetrieveLoggedUserResponse } from '../models/user-retrieve-logged-user-response'

@Injectable({ providedIn: 'root' })
export class UserFeaturesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http)
  }

  /** Path part for operation `userRetrieveLoggedUserEndpoint()` */
  static readonly UserRetrieveLoggedUserEndpointPath = '/user-features/retrieve-logged-user'

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userRetrieveLoggedUserEndpoint()` instead.
   *
   * This method doesn't expect any request body.
   */
  userRetrieveLoggedUserEndpoint$Response(
    params?: UserRetrieveLoggedUserEndpoint$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<UserRetrieveLoggedUserResponse>> {
    return userRetrieveLoggedUserEndpoint(this.http, this.rootUrl, params, context)
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userRetrieveLoggedUserEndpoint$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userRetrieveLoggedUserEndpoint(
    params?: UserRetrieveLoggedUserEndpoint$Params,
    context?: HttpContext,
  ): Observable<UserRetrieveLoggedUserResponse> {
    return this.userRetrieveLoggedUserEndpoint$Response(params, context).pipe(
      map(
        (r: StrictHttpResponse<UserRetrieveLoggedUserResponse>): UserRetrieveLoggedUserResponse =>
          r.body,
      ),
    )
  }
}
